class SJF {
    public static void main(String[] args) {
        // Predefined burst times for processes
        int[] burstTime = {6, 8, 3, 1};

        int n = burstTime.length;

        // Sort burst times in ascending order
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (burstTime[j] > burstTime[j + 1]) {
                    // Swap burst times
                    int temp = burstTime[j];
                    burstTime[j] = burstTime[j + 1];
                    burstTime[j + 1] = temp;
                }
            }
        }

        // Display sorted burst times
        System.out.println("Sorted Burst Times:");
        for (int i = 0; i < n; i++) {
            System.out.println("Process " + (i + 1) + ": " + burstTime[i]);
        }

        // Calculate waiting time and turnaround time
        int[] waitingTime = new int[n];
        int[] turnaroundTime = new int[n];

        waitingTime[0] = 0;
        turnaroundTime[0] = burstTime[0];

        for (int i = 1; i < n; i++) {
            waitingTime[i] = turnaroundTime[i - 1];
            turnaroundTime[i] = waitingTime[i] + burstTime[i];
        }

        // Display results
        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < n; i++) {
            System.out.println((i + 1) + "\t\t" + burstTime[i] + "\t\t" + waitingTime[i] + "\t\t" + turnaroundTime[i]);
        }
    }
}
Shortest Job First (SJF) is a CPU scheduling algorithm that selects the process with the shortest burst time to execute first. It aims to minimize the total processing time and reduce waiting times, thereby enhancing system efficiency. SJF can be preemptive or non-preemptive; in the preemptive version, if a new process arrives with a shorter burst time than the currently running process, it preempts the CPU. The non-preemptive variant executes the entire shortest job without interruption. SJF provides optimal turnaround times for processes with the smallest burst times. However, predicting actual burst times accurately is often challenging. To implement SJF, maintain a ready queue and sort processes based on their burst times. Regularly update the ready queue as new processes arrive or priorities change. The implementation involves continuously selecting and executing the process with the shortest remaining burst time to optimize system performance.

