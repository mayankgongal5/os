class RoundRobin {
    public static void main(String[] args) {
        // Predefined burst times for processes
        int[] burstTime = {10, 5, 8, 2};

        int n = burstTime.length;
        int timeQuantum = 3; // Time quantum for Round Robin

        // Initialize arrays to store waiting time and turnaround time
        int[] waitingTime = new int[n];
        int[] turnaroundTime = new int[n];

        // Perform Round Robin scheduling
        int[] remainingTime = new int[n];
        System.arraycopy(burstTime, 0, remainingTime, 0, n);

        int currentTime = 0;
        int index = 0;

        while (true) {
            boolean allProcessesCompleted = true;

            for (int i = 0; i < n; i++) {
                if (remainingTime[i] > 0) {
                    allProcessesCompleted = false;

                    if (remainingTime[i] > timeQuantum) {
                        currentTime += timeQuantum;
                        remainingTime[i] -= timeQuantum;
                    } else {
                        currentTime += remainingTime[i];
                        waitingTime[i] = currentTime - burstTime[i];
                        remainingTime[i] = 0;
                    }
                }
            }

            if (allProcessesCompleted) {
                break;
            }
        }

        // Calculate turnaround time
        for (int i = 0; i < n; i++) {
            turnaroundTime[i] = burstTime[i] + waitingTime[i];
        }

        // Display results
        System.out.println("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < n; i++) {
            System.out.println((i + 1) + "\t\t" + burstTime[i] + "\t\t" + waitingTime[i] + "\t\t" + turnaroundTime[i]);
        }
    }
}
Round Robin (RR) is a widely used CPU scheduling algorithm designed for time-sharing systems. It assigns fixed time slices or quantum to each process in the ready queue, allowing each process to execute for a specified duration before moving to the next in a circular manner. This preemptive algorithm ensures fairness by providing equal opportunities to all processes, preventing any single process from monopolizing the CPU. If a process's burst time exceeds its time quantum, it's moved to the end of the queue to await its next turn. While RR provides good turnaround time and response time for small time slices, it may suffer from high turnaround times for processes with longer burst times. Implementing RR involves maintaining a ready queue, managing time slices, and updating the queue as processes complete their time slices or new processes arrive, ensuring efficient time utilization in multitasking environments.

